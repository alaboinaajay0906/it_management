from flask import Blueprint, render_template, redirect, url_for, request, Response, g, abort, flash
from .models import Server
from .forms import ServerForm
from . import db
from functools import wraps
import re
from werkzeug.utils import secure_filename
import pandas as pd
main = Blueprint('main', __name__)

# Authentication configuration
VALID_USERNAME = 'itadmin'
VALID_PASSWORD = 'IT@2025'

class BasicAuthUser:
    def __init__(self, auth):
        self.is_authenticated = auth is not None and \
                              auth.username == VALID_USERNAME and \
                              auth.password == VALID_PASSWORD
        self.username = auth.username if self.is_authenticated else None
        self.is_active = True
        self.is_anonymous = not self.is_authenticated

    def get_id(self):
        return self.username

def basic_auth_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        auth = request.authorization
        if not auth:
            return authenticate()
        user = BasicAuthUser(auth)
        if not user.is_authenticated:
            return authenticate()
        g.current_user = user
        return f(*args, **kwargs)
    return decorated

def authenticate():
    """Send 401 response that enables basic auth"""
    return Response(
        'Could not verify your access level for that URL.\n'
        'You have to login with proper credentials', 401,
        {'WWW-Authenticate': 'Basic realm="Login Required"'}
    )

@main.before_request
def load_user():
    auth = request.authorization
    g.current_user = BasicAuthUser(auth) if auth else BasicAuthUser(None)

@main.context_processor
def inject_user():
    return dict(current_user=g.get('current_user', BasicAuthUser(None)))
from collections import Counter
# Server count and health
@main.route('/')
@main.route('/dashboard')
def dashboard():
    servers = Server.query.all()
    total_servers = len(servers)
    
    if not servers:
        return render_template('dashboard.html',
            servers=[],
            total_servers=0,
            up_servers=0,
            maintenance_servers=0,
            down_servers=0,
            health_status="No Data",
            health_color="#4895ef",
            health_percentage=0
        )

    status_counts = Counter(s.status for s in servers)
    up_servers = status_counts.get('Up', 0)
    maintenance_servers = status_counts.get('Maintenance', 0)
    down_servers = status_counts.get('Down', 0)

    try:
        health_percentage = (up_servers / total_servers) * 100
    except ZeroDivisionError:
        health_percentage = 0

    if health_percentage >= 90:
        health_status = "Excellent"
        health_color = "green"
    elif health_percentage >= 75:
        health_status = "Good"
        health_color = "#2a9d8f"
    elif health_percentage >= 50:
        health_status = "Degraded"
        health_color = "#f8961e"
    else:
        health_status = "Critical"
        health_color = "#f94144"

    return render_template('dashboard.html',
        servers=servers,
        total_servers=total_servers,
        up_servers=up_servers,
        maintenance_servers=maintenance_servers,
        down_servers=down_servers,
        health_percentage=health_percentage,
        health_status=health_status,
        health_color=health_color
    )
# Add server
@main.route('/add-server', methods=['GET', 'POST'])
@basic_auth_required
def add_server():
    form = ServerForm()
    if form.validate_on_submit():
        server = Server(
            machine_id=form.machine_id.data,
            machine_code=form.machine_code.data,
            name=form.name.data,
            os=form.os.data,
            ip_address=form.ip_address.data,
            owner=form.owner.data,
            #status=form.status.data,
            specifications=form.specifications.data,
            notes=form.notes.data
        )
        db.session.add(server)
        db.session.commit()
        return redirect(url_for('main.dashboard'))
    return render_template('server_form.html', form=form)

#edit button
@main.route('/edit-server/<int:id>', methods=['GET', 'POST'])
@basic_auth_required
def edit_server(id):
    server = Server.query.get_or_404(id)
    form = ServerForm(obj=server)
    if form.validate_on_submit():
        form.populate_obj(server)
        db.session.commit()
        return redirect(url_for('main.dashboard'))
    return render_template('server_form.html', form=form)

# delete button
@main.route('/delete-server/<int:id>', methods=['POST'])
@basic_auth_required
def delete_server(id):
    server = Server.query.get_or_404(id)
    db.session.delete(server)
    db.session.commit()
    return redirect(url_for('main.dashboard'))

# logout button
@main.route('/logout')
def logout():
    """Basic auth logout workaround"""
    return Response(
        'Logged out. Please close your browser to complete logout.', 401,
        {'WWW-Authenticate': 'Basic realm="Logged Out"'}
    )

# import excel
@main.route('/import-servers', methods=['GET', 'POST'])
@basic_auth_required
def import_servers():
    if request.method == 'POST':
        file = request.files.get('file')
        if not file or file.filename == '':
            flash('No file selected.', 'danger')
            return redirect(request.url)

        filename = secure_filename(file.filename)
        if not filename.endswith(('.xlsx', '.xls')):
            flash('Invalid file format. Please upload an Excel file.', 'danger')
            return redirect(request.url)

        # Optional: file size check
        file.seek(0, 2)
        file_size = file.tell()
        file.seek(0)
        if file_size > 2 * 1024 * 1024:  # 2MB limit
            flash('File too large. Maximum size allowed is 2MB.', 'danger')
            return redirect(request.url)

        try:
            df = pd.read_excel(file)
        except Exception as e:
            flash(f'Error reading Excel file: {str(e)}', 'danger')
            return redirect(request.url)

        required_columns = {'name', 'os','machine_id','machine_code', 'specifications', 'ip_address', 'owner', 'status','notes'}

        if not required_columns.issubset(set(col.lower() for col in df.columns)):
            flash('Missing required columns in Excel file.', 'danger')
            return redirect(request.url)

        existing_ips = {s.ip_address for s in Server.query.with_entities(Server.ip_address).all()}

        try:
            for index, row in df.iterrows():
                # Validate required fields
                if pd.isnull(row[['name', 'os','machine_id','machine_code', 'specifications' ,'ip_address', 'owner', 'status','notes']]).any():
                    flash(f'Missing required data in row {index + 2}.', 'danger')
                    return redirect(request.url)

                ip = str(row['ip_address']).strip()
                if not re.match(r'^\d{1,3}(\.\d{1,3}){3}$', ip):
                    flash(f'Invalid IP address format in row {index + 2}: {ip}', 'danger')
                    return redirect(request.url)

                if ip in existing_ips:
                    flash(f'Duplicate IP address found in row {index + 2}: {ip}', 'danger')
                    return redirect(request.url)

                new_server = Server(
                    name=str(row['name']).strip(),
                    os=str(row['os']).strip(),
                    machine_id=str(row['machine_id']).strip(),
                    machine_code=str(row['machine_code']).strip(),
                    specifications=str(row['specifications']).strip(),
                    ip_address=ip,
                    owner=str(row['owner']).strip(),
                    status=str(row.get('status', '')).strip(),
                    notes=str(row.get('notes', '')).strip()
                )
                db.session.add(new_server)
                existing_ips.add(ip)  # avoid duplicates within the same file

            db.session.commit()
            flash('Servers imported successfully!', 'success')
            return redirect(url_for('main.dashboard'))

        except Exception as e:
            db.session.rollback()
            flash(f'Error during import: {str(e)}', 'danger')
            return redirect(request.url)

    return render_template('import_form.html')
